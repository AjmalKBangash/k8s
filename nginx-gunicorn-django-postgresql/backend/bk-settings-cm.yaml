apiVersion: v1
kind: ConfigMap
metadata:
  name: bk-settings-cm
data:
  settings.py: |
    from django.conf import settings
    from pathlib import Path
    from datetime import timedelta
    import os
    from decouple import config

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    # SECRET_KEY = config('SECRET_KEY')
    SECRET_KEY = os.getenv('SECRET_KEY', config('SECRET_KEY'))

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    # ALLOWED_HOSTS = ['ajmalkhan.online', 'www.ajmalkhan.online', 'localhost', '51.20.65.81','127.0.0.1']
    ALLOWED_HOSTS = ['www.ajmal.com', '*', 'www.ajmal.com:31345', 'ajmal.com', '198.168.49.2', 'ng-service', 'fr-service', '10.99.35.173', '10.108.255.157']
    USE_X_FORWARDED_HOST = True
    # SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') #This line configures Django to recognize a specific header indicating that the request is secure when the application is behind a proxy or load balancer


    # Proper Django configuration involves setting the /
    # SECURE_PROXY_SSL_HEADER, /
    # ALLOWED_HOSTS, and /
    # USE_X_FORWARDED_HOST /
    # settings appropriately to handle redirects and other aspects of security and compatibility when running behind a reverse proxy or load balancer.



    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        
        # My Installed and Configured Apps 
        'corsheaders',
        'core',
        'portfoliomodels',
        'rest_framework',
        'django_filters',
        
        # PROMETHEUS
        'django_prometheus',
        # DJANGO CELERY BEAT FOR DJANGO CELERY TASKS SCHEDULING
        'django_celery_beat',

    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        # 'PortfolioBackend.middleware.LogCsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        # MY INSTALLED MIDDLEWRES 
        'corsheaders.middleware.CorsMiddleware',
        # 'PortfolioBackend.middleware.LogRequestHeadersMiddleware',  # Add this line
        # 'core.logging_middleware.LogRequestHeadersMiddleware',  # Add this line
        # 'core.custom_csrf_middleware.CustomCsrfViewMiddleware',  # Add this line
    ]

    ROOT_URLCONF = 'PortfolioBackend.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'PortfolioBackend.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/5.0/ref/settings/#databases

    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.sqlite3',
    #         'NAME': BASE_DIR / 'db.sqlite3',
    #     }
    # }

        
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.postgresql',
    #         'NAME': config('NAME'),
    #         'USER': config('USER'),
    #         'PASSWORD': config('PASSWORD'),
    #         # 'HOST': '/var/run/postgresql/.s.PGSQL.5432=',  # Path to the Unix socket
    #         # 'HOST': , 
    #         'HOST': config('HOST'), 
    #         'PORT': config('PORT'),
    #     }
    # }

    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.postgresql',
    #         'NAME': 'hamad_db',
    #         'USER': 'hamad',
    #         'PASSWORD': 'passwd-hamad-302',
    #         # 'HOST': 'www.dbpsql.com',
    #         'HOST': 'www.dbpsql.com',
    #         'PORT': '32323',
    #     }
    # }

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME',config('DB_NAME')),
            'USER': os.getenv('DB_USER',config('DB_USER')),
            'PASSWORD': os.getenv('DB_PASSWORD',config('DB_PASSWORD')),
            'HOST': os.getenv('DB_HOST', config('DB_HOST')),
            'PORT': os.getenv('DB_PORT',config('DB_PORT')),
        }
    }

    # settings.py
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': 'redis://redis-headless:6379/3',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
                # 'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
                'SOCKET_TIMEOUT': 5,
                'SOCKET_CONNECT_TIMEOUT': 5,
                'IGNORE_EXCEPTIONS': True,
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 100,
                    'retry_on_timeout': True,
                },
                # Redis persistence configuration
                # "PERSISTENCE": True,
                # "PERSISTENCE_TYPE": "rdb",  # or 'aof'
                # "PERSISTENCE_FILENAME": "/path/to/rdb_file.rdb",  # or 'aof_file.aof'
                # "PERSISTENCE_INTERVAL": 60,  # Seconds
            },
            'TIMEOUT': 60 * 15,  # 15 minutes
            'KEY_PREFIX': 'portfoliobackend_',
        }
    }

    # Optional: Cache timeout (default timeout is 300 seconds)
    CACHE_TTL = 60 * 15  # 15 minutes




    # Password validation
    # https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/5.0/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/5.0/howto/static-files/

    STATIC_URL = 'api/static/'

    STATICFILES_DIRS = [
        # Add the path to your project's static files (e.g., 'myproject/static/')
        # 'PortfolioBackend/static/',
        os.path.join(BASE_DIR, 'api/static'),
        # os.path.join(BASE_DIR, 'Media')
    ]

    MEDIA_URL = 'api/Media/'

    MEDIA_ROOT = os.path.join(BASE_DIR, 'api/Media')

    STATIC_ROOT = os.path.join(BASE_DIR, 'api/staticdirectory')
    # STATIC_ROOT = BASE_DIR / 'staticdirectory'

    # Default primary key field type
    # https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


    AUTH_USER_MODEL = 'core.CustomUser'


    # CORS_ALLOWED_ORIGINS = [
    #     "http://localhost:3000",'https://ajmalkhan.online', 'https://www.ajmalkhan.online'  # Add the origin of your React app
    # ]

    # CORS_ALLOWED_ORIGINS = [
    #     "http://localhost:3000",  # Add the origin of your React app
    #     "http://127.0.0.0:3000",
    #     "https://ajmalkhan.online", 
    #     "http://ajmalkhan.online", 
    #     "http://www.ajmalkhan.online",
    #     "https://www.ajmalkhan.online",
    #     "http://51.20.65.81",
    #     "https://51.20.65.81"
    # ]
    CORS_ALLOWED_ORIGINS = [
    'http://www.ajmal.com',
    # 'https://www.ajmal.com' ,
    'http://.*', 
    'https://.*', 
    'https://www.ajmal.com:31345', 
    # 'https://ajmal.com', 
    'https://198.168.49.2',     
    'http://ng-service',
    'http://ng-service:80',
    'http://fr-service',
    'http://fr-service:80',
    'http://10.99.35.173',
    'http://10.99.35.173:80',
    'http://10.108.255.157'
    ]


    CSRF_COOKIE_NAME = 'csrftoken'
    CSRF_COOKIE_SECURE = False
    CSRF_COOKIE_HTTPONLY = False
    CSRF_TRUSTED_ORIGINS = [
    'https://198.168.49.2',
    'https://198.168.49.2:31345',
    'http://www.ajmal.com',
    'http://ajmal.com',
    # 'https://www.ajmal.com',
    # 'https://ajmal.com',
    'http://.*',
    'https://.*',
    'http://www.ajmal.com:31345'
    'http://ajmal.com:31345',
    'http://ng-service',
    'http://ng-service:80',
    'http://fr-service',
    'http://fr-service:80',
    'http://10.99.35.173', 
    'http://10.108.255.157',
    'http://www.ajmal.com'
    ]


    CORS_ALLOW_CREDENTIALS = True

    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "file": {
                "level": "DEBUG",
                "class": "logging.FileHandler",
                'filename': os.path.join(BASE_DIR, 'django.log'),
            },
        },
        "loggers": {
            "django": {
                "handlers": ["file"],
                "level": "DEBUG",
                "propagate": True,
            },
            'PortfolioBackend': {  # Replace 'yourapp' with your app name
                'handlers': ['file'],
                'level': 'DEBUG',
                'propagate': True,
            },
        },
        }

    # from Tasks.throttling import RozConIntMedScopedRate  # THIS WAS PRACTICE CUSTOM USER THROTTLING
    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': (
            'rest_framework_simplejwt.authentication.JWTAuthentication',
        ),
        'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.ScopedRateThrottle',
        # RozConIntMedScopedRate, # THIS WAS PRACTICE CUSTOM USER THROTTLING
        ],
        'DEFAULT_THROTTLE_RATES': {
            'anon': '10000000/day',
            'user': '10000000/day',
            # 'RCIM': '10/day'   # THIS IS UserRateThrottle  WHERE IT WILL BE SET FOR ALL THE USERS GLOBALLY BUT WE WANT TO SET THROTTLINGON THE BASIS OF POST, GET AND OTHER REQUESTS FOR EACH VIEW, HENCE WE SHOULD GO FOR ScopedRateThrottle
            # 'post_roza': '2/day',
            # 'post_conv': '2/day',
            # 'post_medi': '2/day',
            # 'post_intu': '2/day',
            # 'get_roz': '5/day',
            # 'roz': '8/day',
            # 'med': '1/day',
            # 'RCMISRT': '1/day',
        },
        'DEFAULT_PAGINATION_CLASS': ('rest_framework.pagination.PageNumberPagination'),
        'PAGE_SIZE': (15)
    }



    # ADDED BY ME AND DONT KNOW WHAT IS THIS
    DEBUG_PROPAGATE_EXCEPTIONS = True


    SIMPLE_JWT = {
        "ACCESS_TOKEN_LIFETIME": timedelta(minutes=1000),
        "REFRESH_TOKEN_LIFETIME": timedelta(minutes=2000),
        "ROTATE_REFRESH_TOKENS": False,
        "BLACKLIST_AFTER_ROTATION": False,
        "UPDATE_LAST_LOGIN": False,
        
        "ALGORITHM": "HS256",
        "SIGNING_KEY": settings.SECRET_KEY,
        "VERIFYING_KEY": "",
        "AUDIENCE": None,
        "ISSUER": None,
        "JSON_ENCODER": None,
        "JWK_URL": None,
        "LEEWAY": 0,

        "AUTH_HEADER_TYPES": ("Bearer", "Allikhwa Tokens"),
        "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
        "USER_ID_FIELD": "email",  # id
        "USER_ID_CLAIM": "email",   #user_id
        "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

        "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
        "TOKEN_TYPE_CLAIM": "token_type",
        "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

        "JTI_CLAIM": "jti",

        "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
        "SLIDING_TOKEN_LIFETIME": timedelta(minutes=7000),
        "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=15),

        "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
        "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
        "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
        "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
        "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
        "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
    }



    EMAIL_BACKEND = os.getenv('EMAIL_BACKEND',config('EMAIL_BACKEND'))
    EMAIL_HOST = os.getenv('EMAIL_HOST',config('EMAIL_HOST'))
    EMAIL_PORT = os.getenv('EMAIL_PORT',config('EMAIL_PORT'))  # 587
    # EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS',config('EMAIL_USE_TLS'))
    EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL',config('EMAIL_USE_SSL'))
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER',config('EMAIL_HOST_USER'))  # Your Gmail email address
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD',config('EMAIL_HOST_PASSWORD')) # Your Gmail app passwor

    # CELERY CONFIGURATIONS 

    # CELERY SETTINGS 
    # Define the name of the default Celery application.
    CELERY_APP_NAME = 'PortfolioBackend'  # Default: None

    # Specify the broker URL; in this case, we are using Redis as the broker.
    CELERY_BROKER_URL = 'redis://redis-headless:6379/0'  # Default: 'amqp://guest@localhost//'

    # Specifies the backend used to store task results; here, we use Redis.
    # CELERY_RESULT_BACKEND = 'redis://redis-headless:6379/1'  # Default: None

    # CELERY_CACHE_BACKEND_OPTIONS = {
    #     'expires': 3600  # 1 hour cache expiration for task results
    # }

    CELERY_WORKER_SEND_TASK_EVENTS = True  # Equivalent to adding -E in the CLI

    CELERY_WORKER_LOG_LEVEL = 'info'  # Equivalent to --loglevel=info

    # Defines the serializer used for the task messages.
    CELERY_TASK_SERIALIZER = 'json'  # Default: 'json'

    # Defines the serializer used for the task results.
    CELERY_RESULT_SERIALIZER = 'json'  # Default: 'json'

    # Controls the serialization format used to pass messages between tasks.
    CELERY_ACCEPT_CONTENT = ['json']  # Default: ['json']

    # Enables/disables task result storage. If disabled, task results will not be stored.
    CELERY_IGNORE_RESULT = True  # Default: False

    # If enabled, worker logs detailed task information including input arguments.
    # Enable or disable automatic retrying of tasks.
    CELERY_TASK_ALWAYS_EAGER = False  # Default: False

    # Controls the time-to-live (TTL) for task results in the backend.
    CELERY_RESULT_EXPIRES = 3600 * 2 # Default: None (never expire)

    # Sets the soft time limit (in seconds) for task execution.
    CELERY_TASK_SOFT_TIME_LIMIT = None  # Default: None

    # Sets the hard time limit (in seconds) for task execution.
    CELERY_TASK_TIME_LIMIT = None  # Default: None

    # Specifies the worker concurrency (number of tasks a worker can handle simultaneously).
    CELERY_WORKER_CONCURRENCY = 2  # Default: Number of CPUs available

    # Sets the prefetch multiplier (number of tasks a worker can prefetch).
    CELERY_WORKER_PREFETCH_MULTIPLIER = 2  # Default: 4

    # Configures the visibility timeout for tasks in Redis (time a worker can reserve a task).
    CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}  # Default: {}

    # Specifies the default queue for tasks that are not assigned to any specific queue.
    CELERY_DEFAULT_QUEUE = 'default'  # Default: 'default'

    # Lists available queues in the broker.
    CELERY_QUEUES = None
    # CELERY_QUEUES = {
    #     'default': {
    #         'exchange': 'default',
    #         'routing_key': 'default',
    #     },
    # }  # Default: None (single queue named 'celery')
    # CELERY_QUEUES = {
    #     'high_priority': {
    #         'exchange': 'high_priority',
    #         'routing_key': 'high_priority',
    #     },
    #     'low_priority': {
    #         'exchange': 'low_priority',
    #         'routing_key': 'low_priority',
    #     },
    # }
    # CELERY_ROUTES = {
    #     'PortfolioBackend.tasks.high_priority_task': {'queue': 'high_priority'},
    #     'PortfolioBackend.tasks.low_priority_task': {'queue': 'low_priority'},
    # }


    # Defines a list of periodic tasks that should be executed.
    # CELERY_BEAT_SCHEDULE = {}  # Default: {}
    CELERY_BEAT_SCHEDULE = { # THIS IS WORKING CORRECTLY AS EXPECTED TO RUN PERIODIC OR SCHEDULED TASKS IN DJANGO THROUGH CELERY WHICHIS THE MOST EFFECTIVE WAY FOR RUNNING TASKS BECAUSE IT IS RUNNING ASYNCHRONOUSLY NOT IN DJANGO MAIN THREAD
        'notify_me_after_10_seconds': {
            'task': 'PortfolioBackend.task.Notify',
            # 'schedule': crontab(minute = '*/1'),
            'schedule': 5,
            'args': [4,8]
        }
        }  # Default: {}

    # Controls whether to create a beat instance for periodic tasks.
    # CELERY_BEAT_SCHEDULER = 'celery.beat:PersistentScheduler'  # Default: 'celery.beat:PersistentScheduler' THIS IS FOR COMMON APPPLICATIONS
    CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler' # WHILE THIS IS SPECIFICALLY FOR DJANGO

    # THIS WIL EXPLEICITLY FIND TASKS DEFINED IN THE ADOPTION.APP MODULE(FILE) AND WILL SCHEDULE AND RUN IT
    CELERY_IMPORTS = (
        'PortfolioBackend.task',
    )

    # Configures the backend to use for storing periodic task results.
    # CELERY_CACHE_BACKEND = None  # Default: None
    # CELERY_CACHE_BACKEND = 'redis://redis-headless:6379/2'  # Default: None

    # Sets the timezone for Celery; it should match Django's TIME_ZONE.
    # CELERY_TIMEZONE = 'UTC' # Depricated # Default: 'UTC' Deprecation: The CELERY_TIMEZONE setting is deprecated. Celery now uses the TIME_ZONE setting from Django, so you don't need to set it separately in Celery.
    # Enables/disables UTC timezone awareness.
    CELERY_ENABLE_UTC = True  # Default: True

    # Configure the rate limit for tasks, e.g., '10/m' (10 tasks per minute).
    CELERY_TASK_RATE_LIMIT = None  # Default: None

    # Enables/disables the sending of events (used by monitoring tools like Flower).
    CELERY_SEND_EVENTS = True  # Default: False

    # Define the event backend (for monitoring task execution).
    CELERY_EVENT_QUEUE_PREFIX = 'prometheus'  # Default: 'celeryev'

    # Defines the queue used to store events.
    CELERY_EVENT_QUEUE_TTL = None  # Default: None

    # Control the maximum number of tasks a worker will process before being replaced.
    CELERYD_MAX_TASKS_PER_CHILD = None  # Default: None

    # Sets the path to the PID file for the Celery worker process.
    CELERYD_PIDFILE = None  # Default: None

    # Sets the maximum number of retries before a task is marked as failed.
    CELERY_TASK_MAX_RETRIES = 3  # Default: 3

    # Specifies the default retry delay (in seconds) for tasks.
    CELERY_TASK_DEFAULT_RETRY_DELAY = 30  # Default: 300 seconds (5 minutes)

    # Enables/disables task compression.
    CELERY_TASK_COMPRESSION = None  # Default: None

    # CELERY_WORKER_HEARTBEAT_INTERVAL = 60  # Interval in seconds
    # CELERY_ACKS_LATE = True # Depricated  # Acknowledge tasks after execution (for retry scenarios) 
    CELERY_TASK_ACKS_LATE = True
    CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
    CELERY_TASK_REJECT_ON_WORKER_LOST = True   # Re-queue tasks if worker dies
    CELERYD_MAX_MEMORY_PER_CHILD = 500000  # Max memory per worker in KB (500MB)
    CELERY_WORKER_ENABLE_REMOTE_CONTROL = True  # Disable remote control if not needed
    # CELERY_IMPORTS = ('PortfolioBackend_app.tasks',)  # Only allow specific tasks to be imported
    # CELERY_SECURITY_KEY = "mykey"
    # CELERY_SECURITY_CERTIFICATE = "/path/to/public.pem"
    # CELERY_SECURITY_CERT_STORE = "/path/to/certs"




    # COMMANDS FOR STARTING DJANGO OR MAY BE IN PRODUCTION TOO 
    # python manage.py runserver 0.0.0.0:8000 # IF STARTING DJANGO SERVER AND IF YOU ARE RUNNING REDIS DATABSE IN DOCKER YOU NEED TO START DJANGO WITH 0.0.0.0:8000 OR ANY OTHER PORT SO THAT DJANGO CAN LISTEN FROM EVERY ADDRESS NOT ONLY FROM LOCALHOST WHICH IS BY DEFAULT
    # python manage.py collectstatic
    # python exporter.py # skip this step as it is already configured in celery_adoption_app.py file which is good and giving signals # CELERY PYTHON FILE FOR STARTING (EXPORTRING) PROMETHEUS MEYRICS FOR CELERY
    # celery -A Adoption worker --loglevel=info # STARTING PROMETHEUS WORKERS (ALL CONFIGURATIONS OF PROMETHEUS IN THE SETTINGS.PY FILE IN DJANGO PROJECT)
    # celery -A Adoption beat --loglevel=info # STARTING PROMETHEUS BEAT (BEAT IS A SCHEDULER WHERE WE CAN SCHEDULE TASKS LIKE SENDING EMAILS, RUNNING ANY SCRIPTS IN DJANGO PROJECT IN PRODUCTION ETC)
