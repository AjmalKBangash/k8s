# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: postgres-initdb-config
#   labels:
#     app: postgres
# data:
#   init.sql: |
#     CREATE USER $POSTGRES_USER WITH PASSWORD $POSTGRES_PASSWORD;
#     CREATE DATABASE $POSTGRES_DB;
#     GRANT ALL PRIVILEGES ON DATABASE $POSTGRES_DB TO $POSTGRES_USER;
#     ALTER DATABASE $POSTGRES_DB OWNER TO $POSTGRES_USER;

# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: postgres-initdb-config
# data:
#   init-user-db.sh: |

#     #!/bin/bash
#     set -e

#     # Create database
#     psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
#         CREATE DATABASE $POSTGRES_DB;
#         GRANT ALL PRIVILEGES ON DATABASE $POSTGRES_DB TO $POSTGRES_USER;
#         ALTER DATABASE $POSTGRES_DB OWNER TO $POSTGRES_USER;
#     EOSQL

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initdb-config
data:
  init-user-db.sh: |
    #!/bin/bash
    set -e

    # Create user and database if they don't exist
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
        DO \$\$
        BEGIN
            IF NOT EXISTS (
                SELECT FROM pg_catalog.pg_database
                WHERE datname = '$POSTGRES_DB'
            ) THEN
                CREATE DATABASE $POSTGRES_DB;
            END IF;
            IF NOT EXISTS (
                SELECT FROM pg_catalog.pg_roles
                WHERE rolname = '$POSTGRES_USER'
            ) THEN
                CREATE ROLE $POSTGRES_USER WITH LOGIN PASSWORD '$POSTGRES_PASSWORD';
            END IF;
        END
        \$\$;
    EOSQL

    # Grant privileges
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        GRANT ALL PRIVILEGES ON DATABASE $POSTGRES_DB TO $POSTGRES_USER;
        ALTER DATABASE $POSTGRES_DB OWNER TO $POSTGRES_USER;
    EOSQL
